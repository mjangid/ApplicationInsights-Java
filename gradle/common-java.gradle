/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

// region Shared java configuration

apply plugin: 'java'

compileJava {
    def java6JreDir = System.env.'JAVA_JRE_6'
    if (java6JreDir) {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
        options.bootClasspath = ""

        def requiredJava6Archives = ["rt.jar", "jsse.jar"]
        requiredJava6Archives.each { a ->
            def archivePath = new File(java6JreDir, "lib/$a")
            if (!archivePath.exists()) {
                throw new ProjectConfigurationException("Archive $archivePath required for building in Java 6 could not be found.", null)
            }
            logger.info "Archive '$archivePath' added to boot class path"
            options.bootClasspath += "$archivePath;"
        }
    } else {
        logger.warn "Environment variable 'JAVA_JRE_6' is not defined - falling back to use machine default Java SDK"
    }
}

task prepareSourcesArchive(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
    doFirst {
        archiveName = "$archivesBaseName-$version-sources.jar"
    }
}

task prepareJavadocArchive(type: Jar){
    classifier = 'javadoc'
    from "$docsDir/javadoc"
    doFirst {
        archiveName = "$archivesBaseName-$version-javadoc.jar"
    }
    dependsOn javadoc
}

/*
sourceSets {
    integrationTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}
*/

sourceSets {
    integrationTest {
        // slideshare
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test, dependsOn: jar) {
    group 'Verification'
    description 'Runs the integration tests.'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
//    testResultsDir = file("$testResultsDir/integration")

//    systemProperties['jar.path'] = jar.archivePath
}

task copyLibsToGlobalArtifactsFolder(type: Copy) {
    from libsDir
    into new File(artifactsDirectoryRoot, project.name)
    dependsOn assemble, prepareSourcesArchive, prepareJavadocArchive
}

task prepare {
    dependsOn copyLibsToGlobalArtifactsFolder
}

if (this.hasProperty("testEnvName")) {
    testResultsDirName = testResultsDirName + "/" + testEnvName
    logger.info('Test results folder for project "' + project.name + '" set to "' + testResultsDir + '"')

    testReportDirName = testReportDirName + "/" + testEnvName
    logger.info('Test report folder for project "' + project.name + '" set to ' + testReportDirName + '"')
}

repositories {
    mavenCentral()
}

task collectTestResults << {
    copy {
        from testResultsDir
        into new File(rootProjectBuildDir, "$remoteTestResultsDirName/$project.name")
    }
    copy {
        from testReportDir
        into new File(rootProjectBuildDir, "$remoteTestReportDirName/$project.name")
    }
}

task testAndCollect {
    dependsOn test
    finalizedBy collectTestResults
}

// endregion Shared java configuration

